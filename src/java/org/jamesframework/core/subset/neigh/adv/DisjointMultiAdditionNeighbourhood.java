/*
 * Copyright 2014 Ghent University, Bayer CropScience.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jamesframework.core.subset.neigh.adv;

import java.util.ArrayList;
import java.util.Collections;
import org.jamesframework.core.subset.neigh.moves.GeneralSubsetMove;
import java.util.List;
import java.util.Random;
import java.util.Set;
import org.jamesframework.core.subset.SubsetSolution;
import org.jamesframework.core.subset.neigh.SingleAdditionNeighbourhood;
import org.jamesframework.core.subset.neigh.moves.SubsetMove;
import org.jamesframework.core.subset.neigh.SubsetNeighbourhood;
import org.jamesframework.core.util.SetUtilities;
import org.jamesframework.core.util.SubsetIterator;

/**
 * <p>
 * A subset neighbourhood that generates moves which simultaneously add a fixed number of items to the selection.
 * Generated moves are of type {@link GeneralSubsetMove}, which is a subtype of {@link SubsetMove}, and always only
 * add IDs to the selection. If desired, a set of fixed IDs can be provided which are not allowed to be selected.
 * Also, a maximum size can be imposed so that it is guaranteed that the subset size will not exceed this maximum
 * after application of a move generated by this neighbourhood. It may happen to be impossible to perform the desired
 * number of additions, e.g. because too few items are unselected or because of the imposed maximum subset size. In such
 * case a lower number of items will be added (as many as possible).
 * </p>
 * <p>
 * Note that a large amount of moves may be generated when the subset size increases. Therefore, this
 * advanced neighbourhood should be used with care, especially in combination with searches that inspect
 * all moves in every step. Furthermore, searches that inspect random moves may have few chances to find an
 * improvement in case of a huge amount of possible neighbours.
 * </p>
 * <p>
 * This neighbourhood is thread-safe: it can be safely used to concurrently generate moves in different searches
 * running in separate threads.
 * </p>
 * 
 * @author <a href="mailto:herman.debeukelaer@ugent.be">Herman De Beukelaer</a>
 */
public class DisjointMultiAdditionNeighbourhood extends SubsetNeighbourhood {

    // fixed number of simultaneous additions
    private final int numAdditions;
    // maximum subset size
    private final int maxSubsetSize;
    
    /**
     * Creates a disjoint multi addition neighbourhood that simultaneously adds a fixed number of
     * IDs to the selection. If <code>numAdditions</code> is 1, this neighbourhood generates exactly the
     * same moves as the {@link SingleAdditionNeighbourhood} so in such case it is advised to use the latter
     * neighbourhood which has been optimized for this specific scenario.
     * 
     * @param numAdditions fixed number of added IDs (&gt; 0)
     * @throws IllegalArgumentException if <code>numAdditions</code> is not strictly positive
     */
    public DisjointMultiAdditionNeighbourhood(int numAdditions){
        this(numAdditions, Integer.MAX_VALUE);
    }
    
    /**
     * Creates a disjoint multi addition neighbourhood that simultaneously adds a fixed number of
     * IDs to the selection, taking into account that the subset size may not exceed the given maximum.
     * If <code>numAdditions</code> is 1, this neighbourhood generates exactly the same moves as the
     * {@link SingleAdditionNeighbourhood} so in such case it is advised to use the latter neighbourhood
     * which has been optimized for this specific scenario.
     * 
     * @param numAdditions fixed number of added IDs (&gt; 0)
     * @param maxSubsetSize maximum subset size (&gt; 0)
     * @throws IllegalArgumentException if <code>numAdditions</code> or <code>maxSubsetSize</code>
     *                                  are not strictly positive
     */
    public DisjointMultiAdditionNeighbourhood(int numAdditions, int maxSubsetSize){
        this(numAdditions, maxSubsetSize, null);
    }
    
    /**
     * Creates a disjoint multi addition neighbourhood that simultaneously adds a fixed number of
     * IDs to the selection, taking into account that the subset size may not exceed the given maximum
     * and that the given set of fixed IDs are not allowed to be selected. If <code>numAdditions</code>
     * is 1, this neighbourhood generates exactly the same moves as the {@link SingleAdditionNeighbourhood}
     * so in such case it is advised to use the latter neighbourhood which has been optimized for this
     * specific scenario.
     * 
     * @param numAdditions fixed number of added IDs (&gt; 0)
     * @param maxSubsetSize maximum subset size (&gt; 0)
     * @param fixedIDs set of fixed IDs which are not allowed to be added to the selection
     * @throws IllegalArgumentException if <code>numAdditions</code> or <code>maxSubsetSize</code>
     *                                  are not strictly positive
     */
    public DisjointMultiAdditionNeighbourhood(int numAdditions, int maxSubsetSize, Set<Integer> fixedIDs){
        super(fixedIDs);
        // check number of additions
        if(numAdditions <= 0){
            throw new IllegalArgumentException("The number of additions should be strictly positive.");
        }
        if(maxSubsetSize <= 0){
            throw new IllegalArgumentException("The maximum subset size should be strictly positive.");
        }
        this.numAdditions = numAdditions;
        this.maxSubsetSize = maxSubsetSize;
    }

    /**
     * Get the fixed number of additions performed by generated moves.
     * 
     * @return fixed number of additions
     */
    public int getNumAdditions() {
        return numAdditions;
    }
    
    /**
     * Get the maximum subset size specified at construction.
     * If no maximum size has been set this method returns {@link Integer#MAX_VALUE}.
     * 
     * @return maximum subset size
     */
    public int getMaxSubsetSize() {
        return maxSubsetSize;
    }
    
    /**
     * Generates a move for the given subset solution that selects a random subset of currently unselected IDs.
     * Whenever possible, the requested number of additions is performed. However, taking into account the current
     * number of unselected items, the imposed maximum subset size (if set) and the fixed IDs (if any) may result in
     * fewer additions (as many as possible). If no items can be added, <code>null</code> is returned.
     * 
     * @param solution solution for which a random multi addition move is generated
     * @param rnd source of randomness used to generate random move
     * @return random multi addition move, <code>null</code> if no items can be added
     */
    @Override
    public SubsetMove getRandomMove(SubsetSolution solution, Random rnd) {
        // get set of candidate IDs for addition (fixed IDs are discarded)
        Set<Integer> addCandidates = getAddCandidates(solution);
        // compute number of additions
        int curNumAdd = numAdditions(addCandidates, solution);
        // return null if no additions are possible
        if(curNumAdd == 0){
            return null;
        }
        // pick random IDs to add to selection
        Set<Integer> add = SetUtilities.getRandomSubset(addCandidates, curNumAdd, rnd);
        // create and return move
        return new GeneralSubsetMove(add, Collections.emptySet());
    }

    /**
     * <p>
     * Generates the list of all possible moves that perform \(k\) additions, where \(k\) is the fixed number
     * specified at construction. Note: taking into account the current number of unselected items, the imposed
     * maximum subset size (if set) and the fixed IDs (if any) may result in fewer additions (as many as possible).
     * </p>
     * <p>
     * May return an empty list if no moves can be generated.
     * </p>
     * 
     * @param solution solution for which all possible multi addition moves are generated
     * @return list of all multi addition moves, may be empty
     */
    @Override
    public List<SubsetMove> getAllMoves(SubsetSolution solution) {
        // create empty list to store generated moves
        List<SubsetMove> moves = new ArrayList<>();
        // get set of candidate IDs for addition (fixed IDs are discarded)
        Set<Integer> addCandidates = getAddCandidates(solution);
        // compute number of additions
        int curNumAdd = numAdditions(addCandidates, solution);
        if(curNumAdd == 0){
            // impossible: return empty set
            return moves;
        }
        // create all moves that add curNumAdd items
        Set<Integer> add;
        SubsetIterator<Integer> itAdd = new SubsetIterator<>(addCandidates, curNumAdd);
        while(itAdd.hasNext()){
            add = itAdd.next();
            // create and add move
            moves.add(new GeneralSubsetMove(add, Collections.emptySet()));
        }
        // return all moves
        return moves;
    }
    
    /**
     * Computes the number of additions that are to be performed, given the set of add candidates
     * and the current subset solution. Takes into account the desired number of additions \(k\)
     * specified at construction, the number of currently unselected non-fixed items and the maximum
     * allowed subset size (if any).
     * 
     * @param addCandidates candidate IDs to be added to the selection
     * @param sol subset solution for which moves are being generated
     * @return number of additions to be performed
     */
    private int numAdditions(Set<Integer> addCandidates, SubsetSolution sol){
        int a = Math.min(numAdditions, Math.min(addCandidates.size(), maxSubsetSize-sol.getNumSelectedIDs()));
        return Math.max(a, 0);
    }

}
